my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
formatted_res <- format_COSMOS_res(test_result_for)
SIF <- formatted_res[[1]]
ATT <- formatted_res[[2]]
SIF <- SIF[which(SIF$Weight != 0),]
ATT <- merge(ATT, proteomics_DE_t[,c(3,6)], all.x = T, by.x = "Nodes", by.y = "ID")
ATT$Nodes <- gsub(",","_",ATT$Nodes)
write_csv(SIF, file = paste("results/", "SIF.csv", sep = ""))
write_csv(ATT, file = paste("results/", "ATT.csv", sep = ""))
nodes_ORA = extract_nodes_for_ORA(
sif = SIF,
att = ATT)
saveRDS(nodes_ORA, file = paste("results/", "nodes_ORA_lung.RData", sep = ""))
my_options$timelimit <- 1800
test_back <- preprocess_COSMOS_metabolism_to_signaling(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_back <- run_COSMOS_metabolism_to_signaling(data = test_back,
CARNIVAL_options = my_options)
formatted_res_back <- format_COSMOS_res(test_result_back)
SIF_back <- formatted_res_back[[1]]
ATT_back <- formatted_res_back[[2]]
SIF_back <- SIF_back[which(SIF_back$Weight != 0),]
ATT_back <- merge(ATT_back, proteomics_DE_t[,c(3,6)], all.x = T, by.x = "Nodes", by.y = "ID")
ATT_back$Nodes <- gsub(",","_",ATT_back$Nodes)
write_csv(SIF_back, file = paste("results/",paste("SIF_back.csv",sep = ""), sep = ""))
write_csv(ATT_back, file = paste("results/",paste("ATT_back.csv",sep = ""), sep = ""))
SIF_full <- as.data.frame(rbind(SIF,SIF_back))
SIF_full <- unique(SIF_full)
ATT_full <- as.data.frame(rbind(ATT,ATT_back))
ATT_full <- unique(ATT_full)
ATT_full <- as.data.frame(ATT_full)
write_csv(SIF_full, file = paste("results/",paste("SIF_full.csv",sep = ""), sep = ""))
write_csv(ATT_full, file = paste("results/",paste("ATT_full.csv",sep = ""), sep = ""))
nodes_ORA_full = extract_nodes_for_ORA(
sif = SIF_full,
att = ATT_full)
saveRDS(nodes_ORA_full, file = paste("results/", "nodes_ORA_lung_full.RData", sep = ""))
View(metabolomics_DE_t)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(SummarizedExperiment)
library(dplyr)
library(tidyr)
library(tibble)
raw_metab <- readRDS("data/SummarizedExperiment_extraction_method_cohort_metabolomics.RDS")
raw_prot <- readRDS("data/SummarizedExperiment_extraction_method_cohort_proteomics.RDS")
# annotation tumor and healthy tissue
# raw_metab
metab_count <- as.data.frame(raw_metab@assays@data@listData[[1]])
colnames(metab_count) <- raw_metab@colData@listData[["Sample.Description"]]
metab_count <- tibble::rownames_to_column(metab_count, "ID")
metab_count <- unique(metab_count)
metabolomics_TUvsNG <- as.data.frame(metab_count)
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
View(prot_count)
proteomics_TuvsNG <- as.data.frame(prot_count)
View(proteomics_TuvsNG)
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
proteomics_TuvsNG <- as.data.frame(prot_count)
# additionally differentiate between autoSP3 and MTBE
autoSP3orMTBE <- raw_prot@colData@listData[["Processing"]]
sum(autoSP3orMTBE == "MTBE_SP3")
# first 18 are MTBE_SP3, autoSP3 are only 17
# some samples do not have healthy or cancerous partner with sample preparation
# Thereby, these will be combined so it ends up with 20 samples that are pair-wise combined just like in metabolomics
# We will do these manually so it is exactly the same as metabolomics
proteomics_TuvsNG <- proteomics_TuvsNG[, c(6, 5, 12, 11, 16, 15, 14, 13, 2, 1, 27, 26, 24, 23, 18, 17, 9, 8, 4, 3)]
# "IJ17TV_NG"  "IJ17TV_TU" "8U04FR_NG"  "8U04FR_TU" these samples are from autoSP3 and not MTBE_SP3
colnames(proteomics_TuvsNG) <- gsub("[.]1", "", colnames(proteomics_TuvsNG))
colnames(proteomics_TuvsNG)[1] <- "8JDLQY_TU"
View(proteomics_TuvsNG)
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
proteomics_TuvsNG <- as.data.frame(prot_count)
# additionally differentiate between autoSP3 and MTBE
autoSP3orMTBE <- raw_prot@colData@listData[["Processing"]]
sum(autoSP3orMTBE == "MTBE_SP3")
# first 18 are MTBE_SP3, autoSP3 are only 17
# some samples do not have healthy or cancerous partner with sample preparation
# Thereby, these will be combined so it ends up with 20 samples that are pair-wise combined just like in metabolomics
# We will do these manually so it is exactly the same as metabolomics
proteomics_TuvsNG <- proteomics_TuvsNG[,c(7, 6, 13, 12, 17, 16, 15, 14, 3, 2, 28, 27, 25, 24, 19, 18, 10, 9, 5, 4)]
# "IJ17TV_NG"  "IJ17TV_TU" "8U04FR_NG"  "8U04FR_TU" these samples are from autoSP3 and not MTBE_SP3
colnames(proteomics_TuvsNG) <- gsub("[.]1", "", colnames(proteomics_TuvsNG))
colnames(proteomics_TuvsNG)[1] <- "8JDLQY_TU"
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
proteomics_TuvsNG <- as.data.frame(prot_count)
# additionally differentiate between autoSP3 and MTBE
autoSP3orMTBE <- raw_prot@colData@listData[["Processing"]]
sum(autoSP3orMTBE == "MTBE_SP3")
# first 18 are MTBE_SP3, autoSP3 are only 17
# some samples do not have healthy or cancerous partner with sample preparation
# Thereby, these will be combined so it ends up with 20 samples that are pair-wise combined just like in metabolomics
# We will do these manually so it is exactly the same as metabolomics
proteomics_TuvsNG <- proteomics_TuvsNG[,c(1, 7, 6, 13, 12, 17, 16, 15, 14, 3, 2, 28, 27, 25, 24, 19, 18, 10, 9, 5, 4)]
# "IJ17TV_NG"  "IJ17TV_TU" "8U04FR_NG"  "8U04FR_TU" these samples are from autoSP3 and not MTBE_SP3
colnames(proteomics_TuvsNG) <- gsub("[.]1", "", colnames(proteomics_TuvsNG))
colnames(proteomics_TuvsNG)[1] <- "8JDLQY_TU"
# save raw matrices
saveRDS(metabolomics_TUvsNG, "./results/metabolomics_TUvsNG.Rda")
saveRDS(proteomics_TUvsNG, "./results/proteomics_TUvsNG.Rda")
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
proteomics_TUvsNG <- as.data.frame(prot_count)
# additionally differentiate between autoSP3 and MTBE
autoSP3orMTBE <- raw_prot@colData@listData[["Processing"]]
sum(autoSP3orMTBE == "MTBE_SP3")
# first 18 are MTBE_SP3, autoSP3 are only 17
# some samples do not have healthy or cancerous partner with sample preparation
# Thereby, these will be combined so it ends up with 20 samples that are pair-wise combined just like in metabolomics
# We will do these manually so it is exactly the same as metabolomics
proteomics_TUvsNG <- proteomics_TUvsNG[,c(1, 7, 6, 13, 12, 17, 16, 15, 14, 3, 2, 28, 27, 25, 24, 19, 18, 10, 9, 5, 4)]
# "IJ17TV_NG"  "IJ17TV_TU" "8U04FR_NG"  "8U04FR_TU" these samples are from autoSP3 and not MTBE_SP3
colnames(proteomics_TUvsNG) <- gsub("[.]1", "", colnames(proteomics_TUvsNG))
colnames(proteomics_TUvsNG)[1] <- "8JDLQY_TU"
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
proteomics_TUvsNG <- as.data.frame(prot_count)
# additionally differentiate between autoSP3 and MTBE
autoSP3orMTBE <- raw_prot@colData@listData[["Processing"]]
sum(autoSP3orMTBE == "MTBE_SP3")
# first 18 are MTBE_SP3, autoSP3 are only 17
# some samples do not have healthy or cancerous partner with sample preparation
# Thereby, these will be combined so it ends up with 20 samples that are pair-wise combined just like in metabolomics
# We will do these manually so it is exactly the same as metabolomics
proteomics_TUvsNG <- proteomics_TUvsNG[,c(1, 7, 6, 13, 12, 17, 16, 15, 14, 3, 2, 28, 27, 25, 24, 19, 18, 10, 9, 5, 4)]
# "IJ17TV_NG"  "IJ17TV_TU" "8U04FR_NG"  "8U04FR_TU" these samples are from autoSP3 and not MTBE_SP3
colnames(proteomics_TUvsNG) <- gsub("[.]1", "", colnames(proteomics_TUvsNG))
colnames(proteomics_TUvsNG)[2] <- "8JDLQY_TU"
raw_prot@colData@listData[["Pseudonym"]]
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
View(prot_count)
raw_prot <- readRDS("data/SummarizedExperiment_extraction_method_cohort_proteomics.RDS")
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
View(prot_count)
raw_prot@colData@listData[["Pseudonym"]]
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
View(metab_count)
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
proteomics_TUvsNG <- as.data.frame(prot_count)
# additionally differentiate between autoSP3 and MTBE
autoSP3orMTBE <- raw_prot@colData@listData[["Processing"]]
autoSP3orMTBE
# first 18 are MTBE_SP3, autoSP3 are only 17
# some samples do not have healthy or cancerous partner with sample preparation
# Thereby, these will be combined so it ends up with 20 samples that are pair-wise combined just like in metabolomics
# We will do these manually so it is exactly the same as metabolomics
proteomics_TUvsNG <- proteomics_TUvsNG[,c(1, 7, 6, 13, 12, 17, 16, 15, 14, 3, 2, 28, 27, 25, 24, 19, 18, 10, 9, 5, 4)]
View(proteomics_TUvsNG)
# "IJ17TV_NG"  "IJ17TV_TU" "8U04FR_NG"  "8U04FR_TU" these samples are from autoSP3 and not MTBE_SP3
colnames(proteomics_TUvsNG) <- gsub("[.]1", "", colnames(proteomics_TUvsNG))
colnames(proteomics_TUvsNG)[2] <- "8JDLQY_TU"
# save raw matrices
saveRDS(metabolomics_TUvsNG, "./results/metabolomics_TUvsNG.Rda")
saveRDS(proteomics_TUvsNG, "./results/proteomics_TUvsNG.Rda")
# metab
metabolomics_NG <- metabolomics_TUvsNG[,seq(2, 20, by = 2)]
View(metabolomics_NG)
View(metabolomics_NG)
# metab
metabolomics_NG <- metabolomics_TUvsNG[,seq(3, 21, by = 2)]
View(metabolomics_NG)
metabolomics_TU <- metabolomics_TUvsNG[,seq(2, 21, by = 2)]
View(metabolomics_TU)
logFC_metabolomics_TUvsNG <- metabolomics_TU - metabolomics_NG
View(logFC_metabolomics_TUvsNG)
colnames(logFC_metabolomics_TUvsNG) <- gsub("_TU", "", colnames(logFC_metabolomics_TUvsNG))
# prot
proteomics_NG <- proteomics_TUvsNG[,seq(3, 21, by = 2)]
proteomics_TU <- proteomics_TUvsNG[,seq(2, 21, by = 2)]
logFC_proteomics_TUvsNG <- proteomics_TU - proteomics_NG
colnames(logFC_proteomics_TUvsNG) <- gsub("_TU", "", colnames(logFC_proteomics_TUvsNG))
## z-transformation
#metab
mean_metabolomics_FC <- rowMeans(as.matrix(logFC_metabolomics_TUvsNG), na.rm = T)
sd_metabolomics_FC <- rowSds(as.matrix(logFC_metabolomics_TUvsNG), na.rm = T)
logFC_metabolomics_z <- as.data.frame((logFC_metabolomics_TUvsNG - mean_metabolomics_FC)/sd_metabolomics_FC)
View(logFC_metabolomics_z)
#prot
mean_proteomics_FC <- rowMeans(as.matrix(logFC_proteomics_TUvsNG), na.rm = T)
sd_proteomics_FC <- rowSds(as.matrix(logFC_proteomics_TUvsNG), na.rm = T)
logFC_proteomics_z <- as.data.frame((logFC_proteomics_TUvsNG - mean_proteomics_FC)/sd_proteomics_FC)
View(logFC_proteomics_z)
View(logFC_metabolomics_z)
View(logFC_metabolomics_TUvsNG)
colnames(logFC_metabolomics_TUvsNG)
patient <-"1FF2F9"
met_cosmos <- logFC_metabolomics_z[,c(1, patient)]
View(logFC_metabolomics_z)
met_cosmos <- logFC_metabolomics_z$patient
met_cosmos <- logFC_metabolomics_z[,1]
View(logFC_metabolomics_z)
View(logFC_proteomics_TUvsNG)
cbind(logFC_metabolomics_TUvsNG, metabolomics_TUvsNG[,1])
View(logFC_metabolomics_TUvsNG)
# metab
metabolomics_NG <- metabolomics_TUvsNG[,seq(3, 21, by = 2)]
metabolomics_TU <- metabolomics_TUvsNG[,seq(2, 21, by = 2)]
logFC_metabolomics_TUvsNG <- metabolomics_TU - metabolomics_NG
colnames(logFC_metabolomics_TUvsNG) <- gsub("_TU", "", colnames(logFC_metabolomics_TUvsNG))
logFC_metabolomics_TUvsNG <- cbind(metabolomics_TUvsNG[,1], logFC_metabolomics_TUvsNG)
View(logFC_metabolomics_TUvsNG)
colnames(logFC_metabolomics_TUvsNG)[1] <- "ID"
View(proteomics_TUvsNG)
logFC_proteomics_TUvsNG <- cbind(proteomics_TUvsNG$ID, logFC_metabolomics_TUvsNG)
logFC_proteomics_TUvsNG <- cbind(proteomics_TUvsNG$ID, logFC_proteomics_TUvsNG)
View(logFC_proteomics_TUvsNG)
View(logFC_proteomics_TUvsNG)
View(logFC_metabolomics_TUvsNG)
colnames(logFC_proteomics_TUvsNG)[1] <- "ID"
View(logFC_proteomics_TUvsNG)
logFC_metabolomics_z <- cbind(metabolomics_TUvsNG$ID, logFC_metabolomics_z)
View(logFC_metabolomics_z)
View(logFC_metabolomics_z)
colnames(logFC_metabolomics_z)[1] <- "ID"
View(logFC_metabolomics_z)
logFC_proteomics_z <- cbind(proteomics_TUvsNG$ID, logFC_proteomics_z)
colnames(logFC_proteomics_z)[1] <- "ID"
View(logFC_proteomics_z)
logFC_metabolomics_z$patient
met_cosmos <- logFC_metabolomics_z[,1]
met_cosmos$ID <- logFC_metabolomics_z[,1]
View(met_cosmos)
met_cosmos <- logFC_metabolomics_z[,which(rownames(logFC_metabolomics_z) == patient)]
logFC_metabolomics_z[,which(rownames(logFC_metabolomics_z) == patient)]
which(rownames(logFC_metabolomics_z) == patient)
rownames(logFC_metabolomics_z)
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos <- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
met_cosmos$ID <- logFC_metabolomics_z[,1]
View(met_cosmos)
logFC_metabolomics_z[,1]
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = length(logFC_metabolomics_z)))
View(met_cosmos)
length(logFC_metabolomics_z)
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[2]))
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
View(met_cosmos)
met_cosmos <- logFC_metabolomics_z[,1]
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos <- logFC_metabolomics_z[,1]
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
View(met_cosmos)
met_cosmos$logFC_z <- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
View(met_cosmos)
colnames(met_cosmos) <- c("ID", patient)
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", patient)
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z <- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", patient)
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z <- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", patient)
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos[,which(colnames(logFC_metabolomics_z) == patient)]<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
met_cosmos[,which(colnames(logFC_metabolomics_z) == patient)]
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", patient)
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos[,which(colnames(met_cosmos) == patient)]<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
View(met_cosmos)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", patient)
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos[,which(colnames(prot_cosmos) == patient)]<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
View(prot_cosmos)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
View(met_cosmos)
library(dplyr)
library(tidyr)
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
View(met_cosmos)
metabolomics_DE_t[,c(1,12)]
mapping <- met_cosmos[,c(1,6)]
mapping
mapping <- met_cosmos[,c(1,6)]
mapping
View(met_cosmos)
cosmos_met_input <- met_cosmos[,which(colnames(met_cosmos) == patient)]
View(cosmos_met_input)
View(metabolomics_DE_t)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- met_cosmos[,which(colnames(met_cosmos) == patient)]
View(cosmos_met_input)
names(cosmos_met_input) <- met_cosmos$HMDB
View(cosmos_met_input)
cosmos_met_input <- metabolomics_DE_t$t
names(cosmos_met_input) <- metabolomics_DE_t$HMDB
View(cosmos_met_input)
cosmos_met_input <- as.list(met_cosmos[,which(colnames(met_cosmos) == patient)])
View(cosmos_met_input)
names(cosmos_met_input) <- met_cosmos$HMDB
View(cosmos_met_input)
cosmos_met_input <- metabolomics_DE_t$t
View(metabolomics_DE_t)
typeof(cosmos_met_input)
typeof(metabolomics_DE_t)
cosmos_met_input <- as.list(met_cosmos[,which(colnames(met_cosmos) == patient)])
View(cosmos_met_input)
cosmos_met_input <- as.list(unlist(met_cosmos[,which(colnames(met_cosmos) == patient)])
cosmos_met_input <- as.list(unlist(met_cosmos[,which(colnames(met_cosmos) == patient)]))
et_cosmos[,which(colnames(met_cosmos) == patient)]
met_cosmos[,which(colnames(met_cosmos) == patient)]
unlist(met_cosmos[,which(colnames(met_cosmos) == patient)])
cosmos_met_input <- unlist(met_cosmos[,which(colnames(met_cosmos) == patient)])
names(cosmos_met_input) <- met_cosmos$HMDB
View(cosmos_met_input)
View(prot_cosmos)
View(prot_cosmos)
prot_cosmos <- prot_cosmos %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", patient)
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos[,which(colnames(prot_cosmos) == patient)]<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
View(met_cosmos)
View(met_cosmos)
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "") %>%
arange(patient)
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "") %>%
arrange(patient)
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "") %>%
arrange(patient)
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", patient)
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos[,which(colnames(met_cosmos) == patient)]<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
View(met_cosmos)
# filter top 25 metab
met_cosmos <- met_cosmos %>%
arrange(abs(c(2)))
# filter top 25 metab
met_cosmos <- met_cosmos %>%
arrange(abs(2))
# filter top 25 metab
met_cosmos <- arrange(met_cosmos[,which(colnames(met_cosmos) == patient)])
# filter top 25 metab
met_cosmos <- met_cosmos %>%
arrange(abs(logFC_z))
View(met_cosmos)
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos[,which(colnames(met_cosmos) == patient)]<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
View(met_cosmos)
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 25 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:25)
View(met_cosmos)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
View(prot_cosmos)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
View(prot_cosmos)
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
View(met_cosmos)
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
View(prot_cosmos)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
View(met_cosmos)
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos1 <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
View(met_cosmos1)
