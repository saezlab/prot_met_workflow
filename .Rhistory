#legend.title = element_blank()
)
volc.PEA.drivers.prot
pdf("results/plots/main_drivers_PEA_proteomics.pdf", width = 10)
volc.PEA.drivers.prot
dev.off()
# Chunk 11
sessionInfo()
View(network_combined)
View(proteomics_DE_t)
View(metabolomics_DE_t)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
logFC_metabolomics_z <- readRDS("./results/logFC_metabolomics_z.Rda")
logFC_proteomics_z <- readRDS("./results/logFC_proteomics_z.Rda")
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
logFC_metabolomics_z <- readRDS("./results/logFC_metabolomics_z.Rda")
logFC_proteomics_z <- readRDS("./results/logFC_proteomics_z.Rda")
# use single patients of logFC_metabolomics_z and logFC_proteomics_z
# 3 patients: e.g. "1FF2F9", "36AT2O", "K6R512", "8JDLQY" , "ZT9UTK"
patient <-"36AT2O"
# input is z-score of logFC
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- rownames(logFC_metabolomics_z)
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_z)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- rownames(logFC_proteomics_z)
prot_cosmos$logFC_z<- logFC_proteomics_z[,which(colnames(logFC_proteomics_z) == patient)]
z_score_prot <- prot_cosmos
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
# why less -> x1.Met.His and X3.Met.His left out for 1FF2F9. Is this a problem?
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
formatted_res <- format_COSMOS_res(test_result_for)
SIF <- formatted_res[[1]]
ATT <- formatted_res[[2]]
SIF <- SIF[which(SIF$Weight != 0),]
ATT <- merge(ATT, z_score_prot, all.x = T, by.x = "Nodes", by.y = "ID")
ATT$Nodes <- gsub(",","_",ATT$Nodes)
write_csv(SIF, file = paste("results/single_patient/",paste(patient, "_SIF.csv",sep = ""), sep = ""))
write_csv(ATT, file = paste("results/single_patient/",paste(patient, "_ATT.csv",sep = ""), sep = ""))
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
logFC_metabolomics_z <- readRDS("./results/logFC_metabolomics_z.Rda")
logFC_proteomics_z <- readRDS("./results/logFC_proteomics_z.Rda")
# use single patients of logFC_metabolomics_z and logFC_proteomics_z
# 3 patients: e.g. "1FF2F9", "36AT2O", "K6R512", "8JDLQY" , "ZT9UTK"
patient <-"36AT2O"
# input is z-score of logFC
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- rownames(logFC_metabolomics_z)
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_z)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- rownames(logFC_proteomics_z)
prot_cosmos$logFC_z<- logFC_proteomics_z[,which(colnames(logFC_proteomics_z) == patient)]
z_score_prot <- prot_cosmos
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
# why less -> x1.Met.His and X3.Met.His left out for 1FF2F9. Is this a problem?
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
formatted_res <- format_COSMOS_res(test_result_for)
SIF <- formatted_res[[1]]
ATT <- formatted_res[[2]]
SIF <- SIF[which(SIF$Weight != 0),]
ATT <- merge(ATT, z_score_prot, all.x = T, by.x = "Nodes", by.y = "ID")
ATT$Nodes <- gsub(",","_",ATT$Nodes)
write_csv(SIF, file = paste("results/single_patient/",paste(patient, "_SIF.csv",sep = ""), sep = ""))
write_csv(ATT, file = paste("results/single_patient/",paste(patient, "_ATT.csv",sep = ""), sep = ""))
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
logFC_metabolomics_z <- readRDS("./results/logFC_metabolomics_z.Rda")
logFC_proteomics_z <- readRDS("./results/logFC_proteomics_z.Rda")
# use single patients of logFC_metabolomics_z and logFC_proteomics_z
# 3 patients: e.g. "1FF2F9", "36AT2O", "K6R512", "8JDLQY" , "ZT9UTK"
patient <-"8JDLQY"
# input is z-score of logFC
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- rownames(logFC_metabolomics_z)
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_z)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- rownames(logFC_proteomics_z)
prot_cosmos$logFC_z<- logFC_proteomics_z[,which(colnames(logFC_proteomics_z) == patient)]
z_score_prot <- prot_cosmos
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
# why less -> x1.Met.His and X3.Met.His left out for 1FF2F9. Is this a problem?
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
formatted_res <- format_COSMOS_res(test_result_for)
SIF <- formatted_res[[1]]
ATT <- formatted_res[[2]]
SIF <- SIF[which(SIF$Weight != 0),]
ATT <- merge(ATT, z_score_prot, all.x = T, by.x = "Nodes", by.y = "ID")
ATT$Nodes <- gsub(",","_",ATT$Nodes)
write_csv(SIF, file = paste("results/single_patient/",paste(patient, "_SIF.csv",sep = ""), sep = ""))
write_csv(ATT, file = paste("results/single_patient/",paste(patient, "_ATT.csv",sep = ""), sep = ""))
# include backwards run
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
logFC_metabolomics_z <- readRDS("./results/logFC_metabolomics_z.Rda")
logFC_proteomics_z <- readRDS("./results/logFC_proteomics_z.Rda")
# use single patients of logFC_metabolomics_z and logFC_proteomics_z
# 3 patients: e.g. "1FF2F9", "36AT2O", "K6R512", "8JDLQY" , "ZT9UTK"
patient <-"ZT9UTK"
# input is z-score of logFC
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- rownames(logFC_metabolomics_z)
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_z)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- rownames(logFC_proteomics_z)
prot_cosmos$logFC_z<- logFC_proteomics_z[,which(colnames(logFC_proteomics_z) == patient)]
z_score_prot <- prot_cosmos
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
# why less -> x1.Met.His and X3.Met.His left out for 1FF2F9. Is this a problem?
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
formatted_res <- format_COSMOS_res(test_result_for)
SIF <- formatted_res[[1]]
ATT <- formatted_res[[2]]
SIF <- SIF[which(SIF$Weight != 0),]
ATT <- merge(ATT, z_score_prot, all.x = T, by.x = "Nodes", by.y = "ID")
ATT$Nodes <- gsub(",","_",ATT$Nodes)
write_csv(SIF, file = paste("results/single_patient/",paste(patient, "_SIF.csv",sep = ""), sep = ""))
write_csv(ATT, file = paste("results/single_patient/",paste(patient, "_ATT.csv",sep = ""), sep = ""))
# include backwards run
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cosmosR")
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
sessionInfo()
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("saezlab/cosmosR")
sessionInfo()
devtools::install_github("saezlab/cosmosR")
sessionInfo()
BiocManager::install("cosmosR")
?repositories
setRepositories()
BiocManager::install("cosmosR")
sessionInfo()
library(cosmosR)
sessionInfo()
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("saezlab/cosmosR")
detach("package:cosmosR", unload = TRUE)
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("saezlab/cosmosR")
detach("package:decoupleR", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:readxl", unload = TRUE)
detach("package:tidyr", unload = TRUE)
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("saezlab/cosmosR")
sessionInfo()
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
data("meta_network")
sessionInfo()
source("~/GitHub/prot_met_workflow/scripts/run_cosmos.R", echo=TRUE)
source("~/GitHub/prot_met_workflow/scripts/run_cosmos.R", echo=TRUE)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
metabolomics_DE_t <- as.data.frame(read_delim("data/metabolomics_DE_t_TUvsNG.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
proteomics_DE_t <- as.data.frame(read_delim("data/proteomics_DE_t_TUvsNG_autoSP3.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
metabolomics_DE_t <- merge(metabolomics_DE_t, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
library(dplyr)
library(tidyr)
metabolomics_DE_t <- metabolomics_DE_t %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- metabolomics_DE_t[,c(1,12)]
cosmos_met_input <- metabolomics_DE_t$t
names(cosmos_met_input) <- metabolomics_DE_t$HMDB
proteomics_DE_t <- proteomics_DE_t %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
cosmos_prot_input <- proteomics_DE_t$t
names(cosmos_prot_input) <- proteomics_DE_t$ID
cosmos_met_input <- cosmos_met_input[which(abs(cosmos_met_input) > 3)]
cosmos_prot_input <- cosmos_prot_input[which(abs(cosmos_prot_input) > 6)]
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 6,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
formatted_res <- format_COSMOS_res(test_result_for)
SIF <- formatted_res[[1]]
ATT <- formatted_res[[2]]
SIF <- SIF[which(SIF$Weight != 0),]
ATT <- merge(ATT, proteomics_DE_t[,c(3,6)], all.x = T, by.x = "Nodes", by.y = "ID")
ATT$Nodes <- gsub(",","_",ATT$Nodes)
write_csv(SIF, file = paste("results/final_run/", "SIF_n6.csv", sep = ""))
write_csv(ATT, file = paste("results/final_run/", "ATT_n6.csv", sep = ""))
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
metabolomics_DE_t <- as.data.frame(read_delim("data/metabolomics_DE_t_TUvsNG.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
proteomics_DE_t <- as.data.frame(read_delim("data/proteomics_DE_t_TUvsNG_autoSP3.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
metabolomics_DE_t <- merge(metabolomics_DE_t, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
library(dplyr)
library(tidyr)
metabolomics_DE_t <- metabolomics_DE_t %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- metabolomics_DE_t[,c(1,12)]
cosmos_met_input <- metabolomics_DE_t$t
names(cosmos_met_input) <- metabolomics_DE_t$HMDB
proteomics_DE_t <- proteomics_DE_t %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
cosmos_prot_input <- proteomics_DE_t$t
names(cosmos_prot_input) <- proteomics_DE_t$ID
cosmos_met_input <- cosmos_met_input[which(abs(cosmos_met_input) > 3)]
cosmos_prot_input <- cosmos_prot_input[which(abs(cosmos_prot_input) > 6)]
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 5,
CARNIVAL_options = my_options)
my_options$timelimit <- 1200
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
formatted_res <- format_COSMOS_res(test_result_for)
SIF <- formatted_res[[1]]
ATT <- formatted_res[[2]]
SIF <- SIF[which(SIF$Weight != 0),]
ATT <- merge(ATT, proteomics_DE_t[,c(3,6)], all.x = T, by.x = "Nodes", by.y = "ID")
ATT$Nodes <- gsub(",","_",ATT$Nodes)
write_csv(SIF, file = paste("results/final_run/", "SIF_n6.csv", sep = ""))
write_csv(ATT, file = paste("results/final_run/", "ATT_n6.csv", sep = ""))
