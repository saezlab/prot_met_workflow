slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
View(met_cosmos)
View(cosmos_met_input)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
View(met_cosmos)
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
View(met_cosmos)
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
View(cosmos_met_input)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
metabolomics_DE_t <- as.data.frame(read_delim("data/metabolomics_DE_t_TUvsNG.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
proteomics_DE_t <- as.data.frame(read_delim("data/proteomics_DE_t_TUvsNG_autoSP3.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
metabolomics_DE_t <- merge(metabolomics_DE_t, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
library(dplyr)
library(tidyr)
metabolomics_DE_t <- metabolomics_DE_t %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- metabolomics_DE_t[,c(1,12)]
cosmos_met_input <- metabolomics_DE_t$t
names(cosmos_met_input) <- metabolomics_DE_t$HMDB
proteomics_DE_t <- proteomics_DE_t %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
cosmos_prot_input <- proteomics_DE_t$t
names(cosmos_prot_input) <- proteomics_DE_t$ID
cosmos_met_input <- cosmos_met_input[which(abs(cosmos_met_input) > 3)]
cosmos_prot_input <- cosmos_prot_input[which(abs(cosmos_prot_input) > 6)]
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 3,
CARNIVAL_options = my_options)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
View(metabolomics_DE_t)
View(metabolomics_DE_t)
View(metabolomics_DE_t)
raw_metab <- readRDS("data/SummarizedExperiment_extraction_method_cohort_metabolomics.RDS")
raw_prot <- readRDS("data/SummarizedExperiment_extraction_method_cohort_proteomics.RDS")
# annotation tumor and healthy tissue
# raw_metab
metab_count <- as.data.frame(raw_metab@assays@data@listData[[1]])
colnames(metab_count) <- raw_metab@colData@listData[["Sample.Description"]]
View(raw_metab)
View(metab_count)
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
View(raw_prot)
View(prot_count)
View(metab_count)
View(prot_count)
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(SummarizedExperiment)
library(dplyr)
library(tidyr)
library(tibble)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(SummarizedExperiment)
library(dplyr)
library(tidyr)
library(tibble)
## Data is already processed -> log2() transformation
raw_metab <- readRDS("data/SummarizedExperiment_extraction_method_cohort_metabolomics.RDS")
raw_prot <- readRDS("data/SummarizedExperiment_extraction_method_cohort_proteomics.RDS")
# annotation tumor and healthy tissue
# raw_metab
metab_count <- as.data.frame(raw_metab@assays@data@listData[[1]])
colnames(metab_count) <- raw_metab@colData@listData[["Sample.Description"]]
metab_count <- unique(metab_count)
metabolomics_TUvsNG <- as.data.frame(metab_count)
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
proteomics_TUvsNG <- as.data.frame(prot_count[,-1])
rownames(proteomics_TUvsNG) <- prot_count$ID
# additionally differentiate between autoSP3 and MTBE
autoSP3orMTBE <- raw_prot@colData@listData[["Processing"]]
sum(autoSP3orMTBE == "MTBE_SP3")
# first 18 are MTBE_SP3, autoSP3 are only
View(metabolomics_TUvsNG)
View(metab_count)
View(metabolomics_TUvsNG)
View(metab_count)
View(metabolomics_TUvsNG)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(decoupleR)
library(readr)
library(readxl)
library(dplyr)
library(tibble)
library(tidyr)
library(pheatmap)
library(ggplot2)
library(ComplexHeatmap)
# Chunk 3
# network combined
combined_metab_gene_hallmarks <- read_csv("support/combined_metab_gene_hallmarks.csv")
network_combined <- combined_metab_gene_hallmarks
network_combined$mor <- 1
network_combined$term <- gsub("HALLMARK_","", network_combined$term)
network_combined$term <- gsub("_", " ", network_combined$term)
# network separated
network_met <- network_combined[which(grepl("HMDB", network_combined$feature) == T),]
network_prot <- network_combined[which(grepl("HMDB", network_combined$feature) == F),]
# input for pathway enrichment analysis
logFC_PEA_prot_MTBE_z <- readRDS("results/single_patient/logFC_PEA_prot_MTBE_z.Rda")
logFC_PEA_prot_autoSP3_z <- readRDS("results/single_patient/logFC_PEA_prot_autoSP3_z.Rda")
logFC_PEA_metab_z <- readRDS("results/single_patient/logFC_PEA_metab_z.Rda")
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
# transform metab from ID to HMDB numbers
logFC_PEA_metab_z <- logFC_PEA_metab_z %>%
rownames_to_column(var= "ID")
logFC_PEA_metab_z <- merge(logFC_PEA_metab_z, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
logFC_PEA_metab_z <- logFC_PEA_metab_z[,-c(6:8)]
logFC_PEA_metab_z <- logFC_PEA_metab_z %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "") %>%
unique()
# average if metabolites have same HMDB number
# so there is only one HMDB as input
logFC_PEA_metab_z <- logFC_PEA_metab_z[,c(6,2:5)]
logFC_PEA_metab_z <- logFC_PEA_metab_z %>%
group_by(HMDB) %>%
summarise_each(funs(mean))
# now rownames can be annotated
logFC_PEA_metab_z <- logFC_PEA_metab_z %>%
column_to_rownames("HMDB")
# NAs needs to be removed and input in matrix form
logFC_PEA_metab_z <- logFC_PEA_metab_z %>%
drop_na() %>%
as.matrix()
colnames(logFC_PEA_metab_z) <- paste("Patient", colnames(logFC_PEA_metab_z), sep ="_")
logFC_PEA_prot_MTBE_z <- logFC_PEA_prot_MTBE_z %>%
drop_na() %>%
as.matrix()
colnames(logFC_PEA_prot_MTBE_z) <- paste("Patient", colnames(logFC_PEA_prot_MTBE_z), sep ="_")
logFC_PEA_prot_autoSP3_z <- logFC_PEA_prot_autoSP3_z %>%
drop_na() %>%
as.matrix()
colnames(logFC_PEA_prot_autoSP3_z) <- paste("Patient", colnames(logFC_PEA_prot_autoSP3_z), sep ="_")
# now the inputs are all in the right format
## combined prot_MTBE with metab and prot_autoSP3 with metab
combined_MTBE <- rbind(logFC_PEA_metab_z, logFC_PEA_prot_MTBE_z)
combined_autoSP3 <- rbind(logFC_PEA_metab_z, logFC_PEA_prot_autoSP3_z)
# MTBE
norm_wmean_combined_MTBE <- run_wmean(mat = combined_MTBE, net = network_combined, .source = "term", .target = "feature", .mor="mor")
norm_wmean_combined_MTBE <- norm_wmean_combined_MTBE %>%
filter(statistic == 'norm_wmean')
# autoSP3
norm_wmean_combined_autoSP3 <- run_wmean(mat = combined_autoSP3, net = network_combined, .source = "term", .target = "feature", .mor="mor")
norm_wmean_combined_autoSP3 <- norm_wmean_combined_autoSP3 %>%
filter(statistic == 'norm_wmean')
# create matrix with pathway as rows and samples in columns
corr_matrix_MTBE <- norm_wmean_combined_MTBE[,c(3,2,4)]
corr_matrix_MTBE <- pivot_wider(corr_matrix_MTBE, names_from = condition, values_from = score )
corr_matrix_MTBE <- corr_matrix_MTBE %>%
column_to_rownames("source")
corr_matrix_autoSP3 <- norm_wmean_combined_autoSP3[,c(3,2,4)]
corr_matrix_autoSP3 <- pivot_wider(corr_matrix_autoSP3, names_from = condition, values_from = score )
corr_matrix_autoSP3 <- corr_matrix_autoSP3 %>%
column_to_rownames("source")
corr_integrated <- diag(cor(corr_matrix_MTBE, corr_matrix_autoSP3, method= "pearson"))
## correlation sample wise
corr_integrated
mean_corr_integrated <- mean(corr_integrated)
mean_corr_integrated
# metab
norm_wmean_metab_sep <- run_wmean(mat = logFC_PEA_metab_z, net = network_combined, .source = "term", .target = "feature", .mor="mor")
norm_wmean_metab_sep <- norm_wmean_metab_sep %>%
filter(statistic == 'norm_wmean')
# prot
norm_wmean_prot_MTBE_sep <- run_wmean(mat = logFC_PEA_prot_MTBE_z, net = network_combined, .source = "term", .target = "feature", .mor="mor")
norm_wmean_prot_MTBE_sep <- norm_wmean_prot_MTBE_sep %>%
filter(statistic == 'norm_wmean')
norm_wmean_prot_autoSP3_sep <- run_wmean(mat = logFC_PEA_prot_autoSP3_z, net = network_combined, .source = "term", .target = "feature", .mor="mor")
norm_wmean_prot_autoSP3_sep <- norm_wmean_prot_autoSP3_sep %>%
filter(statistic == 'norm_wmean')
corr_matrix_MTBE_sep <- norm_wmean_prot_MTBE_sep[,c(3,2,4)]
corr_matrix_MTBE_sep <- pivot_wider(corr_matrix_MTBE_sep, names_from = condition, values_from = score )
corr_matrix_MTBE_sep <- corr_matrix_MTBE_sep %>%
column_to_rownames("source")
corr_matrix_autoSP3_sep <- norm_wmean_prot_autoSP3_sep[,c(3,2,4)]
corr_matrix_autoSP3_sep <- pivot_wider(corr_matrix_autoSP3_sep, names_from = condition, values_from = score )
corr_matrix_autoSP3_sep <- corr_matrix_autoSP3_sep %>%
column_to_rownames("source")
corr_proteomics <- diag(cor(corr_matrix_MTBE_sep, corr_matrix_autoSP3_sep, method= "pearson"))
## correlation sample wise
corr_proteomics
mean_corr_proteomics <- mean(corr_proteomics)
mean_corr_proteomics
matrix_metab <- norm_wmean_metab_sep[,c(3,2,4)]
matrix_metab <- pivot_wider(matrix_metab, names_from = condition, values_from = score )
matrix_MTBE <- norm_wmean_prot_MTBE_sep[,c(3,2,4)]
matrix_MTBE <- pivot_wider(matrix_MTBE, names_from = condition, values_from = score )
matrix_autoSP3 <- norm_wmean_prot_autoSP3_sep[,c(3,2,4)]
matrix_autoSP3 <- pivot_wider(matrix_autoSP3, names_from = condition, values_from = score )
# filtering of same pathways between metab and MTBE, autoSP3 respectively
subset_corr <- which(matrix_metab$source %in% matrix_MTBE$source)
source_subset <- matrix_metab$source[subset_corr]
matrix_metab <- matrix_metab[subset_corr,]
matrix_metab <- matrix_metab %>%
column_to_rownames("source")
matrix_MTBE <- matrix_MTBE[which(matrix_MTBE$source %in% source_subset),]
matrix_MTBE <- matrix_MTBE %>%
column_to_rownames("source")
matrix_autoSP3 <- matrix_autoSP3[which(matrix_autoSP3$source %in% source_subset),]
matrix_autoSP3 <- matrix_autoSP3 %>%
column_to_rownames("source")
# average metab and proteomics (prot1, prot2 respectively)
corr_matrix_MTBE_metab <- list(matrix_metab, matrix_MTBE)
corr_matrix_MTBE_metab_avg <- Reduce("+",corr_matrix_MTBE_metab)/length(corr_matrix_MTBE_metab)
corr_matrix_autoSP3_metab <- list(matrix_metab, matrix_autoSP3)
corr_matrix_autoSP3_metab_avg <- Reduce("+",corr_matrix_autoSP3_metab)/length(corr_matrix_autoSP3_metab)
corr_integrated_average <- diag(cor(corr_matrix_MTBE_metab_avg, corr_matrix_autoSP3_metab_avg, method ="pearson"))
corr_integrated_average
mean_corr_integrated_average<- mean(corr_integrated_average)
mean_corr_integrated_average
ph_corr <- matrix(NA, ncol = 3, nrow=5)
colnames(ph_corr) <- c("Proteomics", "Integrated", "Integrated Average")
rownames(ph_corr) <- c("Patient_K6R512", "Patient_KWF2HW", "Patient_ZQ021J", "Patient_ZT9UTK", "Average")
ph_corr[c(1:4),1] <- corr_proteomics
ph_corr[5,1] <- mean_corr_proteomics
ph_corr[c(1:4),2] <- corr_integrated
ph_corr[5,2] <- mean_corr_integrated
ph_corr[c(1:4),3] <- corr_integrated_average
ph_corr[5,3] <- mean_corr_integrated_average
#breaks <- c(seq(0,0.99, by=.1))
cols <- colorRampPalette(c("white","#7285A5"))(100)
heatmap_plot <- ComplexHeatmap::pheatmap(ph_corr, display_numbers = T, cluster_cols = F,  cluster_rows=F, fontsize_number = 14, treeheight_row = 0, color = cols, column_names_side = c("top"), fontsize = 12, angle_col = c("0"), annotation_legend =T)
heatmap_plot
pdf("pHeatmap_pathway_enrichment_scores_corr_proteomics.pdf", height = 3.5)
heatmap_plot
dev.off()
install_github("jokergoo/ComplexHeatmap")
library(devtools)
install_github("jokergoo/ComplexHeatmap")
heatmap_plot <- ComplexHeatmap::pheatmap(ph_corr, display_numbers = T, cluster_cols = F,  cluster_rows=F, fontsize_number = 14, treeheight_row = 0, color = cols, column_names_side = c("top"), fontsize = 12, angle_col = c("0"), annotation_legend =T)
heatmap_plot
# metab and MTBE
corr_metab_MTBE <- diag(cor(matrix_metab, matrix_MTBE, method= "pearson"))
## correlation sample wise
corr_metab_MTBE
mean_corr_metab_MTBE <- mean(corr_metab_MTBE)
mean_corr_metab_MTBE
# metab and autoSP3
corr_metab_autoSP3 <- diag(cor(matrix_metab, matrix_autoSP3, method= "pearson"))
## correlation sample wise
corr_metab_autoSP3
mean_corr_metab_autoSP3 <- mean(corr_metab_autoSP3)
mean_corr_metab_autoSP3
ph_corr_m <- matrix(NA, ncol = 2, nrow=5)
colnames(ph_corr_m) <- c("Metab and MTBE", "Metab and autoSP3")
rownames(ph_corr_m) <- c("Patient_K6R512", "Patient_KWF2HW", "Patient_ZQ021J", "Patient_ZT9UTK", "Average")
ph_corr_m[c(1:4),1] <- corr_metab_MTBE
ph_corr_m[5,1] <- mean_corr_metab_MTBE
ph_corr_m[c(1:4),2] <- corr_metab_autoSP3
ph_corr_m[5,2] <- mean_corr_metab_autoSP3
#breaks <- c(seq(0,0.99, by=.1))
cols <- colorRampPalette(c("white","#7285A5"))(100) # or use length(breaks)
heatmap_plot_m <- ComplexHeatmap::pheatmap(ph_corr_m, display_numbers = T, cluster_cols = F,  cluster_rows=F, fontsize_number = 14, treeheight_row = 0, color = cols, column_names_side = c("top"), fontsize = 12, angle_col = c("0"), annotation_legend =T)
heatmap_plot_m
pdf("pHeatmap_pathway_enrichment_scores_corr_metab_and_proteomics.pdf", height = 3.5)
heatmap_plot_m
dev.off()
corr_metab_autoSP3
t.test(corr_metab_autoSP3,corr_metab_MTBE)
wilcox.test(corr_metab_autoSP3,corr_metab_MTBE)
t.test(corr_metab_autoSP3,corr_metab_MTBE)
library(readr)
library(readxl)
library(ocean)
library(visNetwork)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
metabolomics_DE_t <- as.data.frame(read_delim("data/metabolomics_DE_t_TUvsNG.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
metabolomics_DE_t <- merge(metabolomics_DE_t, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
library(dplyr)
library(tidyr)
metabolomics_DE_t <- metabolomics_DE_t %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- metabolomics_DE_t[,c(1,12)]
t_table <- metabolomics_DE_t[,c(12,5)]
names(t_table) <- c("ID","MTBE_SP3")
t_table <- as.data.frame(t_table)
t_table <- t_table[t_table$ID %in% mapping_table$metab,]
t_table <- t_table_metactivity_input_formater(metabolomic_t_table = t_table,
mapping_table = mapping_table,
affixes = c("c","l","x","m","e","n","r"))
##Prepare the metabolic enzyme sets
penalty_min <- 7 #minimum 1 and integer
penalty_max <- 9 #maximum 9 and integer
######## SUBNETWORKS
# View(unique(recon2_redhuman$pathway))
all_pathways <- unique(recon2_redhuman$pathway)
sub_network <- model_to_pathway_sif(pathway_to_keep = all_pathways$X1)
sub_network <- translate_complexes(sub_network)
sub_network_nocofact <- remove_cofactors(sub_network)
sub_network_nocofact <- compress_transporters(sub_network_nocofact = sub_network_nocofact)
sub_network_nocofact <- split_transaminases(sub_network_nocofact = sub_network_nocofact)
enzymes <- unique(sub_network_nocofact$attributes$V1)
enzymes <- enzymes[!grepl("_[clxmenr]$",enzymes)]
sub_forest <- forestMaker(enzymes, sub_network_nocofact$reaction_network, branch_length = c(1,1), remove_reverse = T)
###################
reaction_set_list <- prepare_metabolite_set(penalty_range = penalty_min:penalty_max,
forest = sub_forest,
measured_metabolites = t_table$KEGG)
reaction_set_list_merged <- condense_metabolite_set(reaction_set_list = reaction_set_list)
penalty <- 8 #has be between penalty_min and penalty_max and integer
regulons_df <- prepare_regulon_df(reaction_set_list_merged, penalty, filter_imbalance = c(0,1))
t_table <- t_table[!duplicated(t_table$KEGG),] #‘cpd:C00047’ is duplicated
##Compute metabolic enzme enrichment score
metactivity_res <- metactivity(metabolomic_t_table = t_table,
regulons_df = regulons_df,
compartment_pattern = "_[a-z]$",
k = 1000)
mean_ES_df <- metactivity_res$ES
mean_NES_df <- metactivity_res$NES
View(mean_NES_df)
translated_results <- translate_results(regulons_df = regulons_df, t_table = t_table, mapping_table = mapping_table)
translated_regulons_df <- translated_results$regulons_df
translated_regulons_df$ID <- paste(translated_regulons_df$set, gsub("_[a-z]$","",translated_regulons_df$targets), sep = "___")
translated_regulons_df <- translated_regulons_df[,-c(1,2)]
translated_regulons_df <- translated_regulons_df %>% group_by(ID) %>% summarise_each(funs(mean(., na.rm = TRUE)))
translated_regulons_df <- as.data.frame(translated_regulons_df)
translated_regulons_df$set <- gsub("___.*","",translated_regulons_df$ID)
translated_regulons_df$targets <- gsub(".*___","",translated_regulons_df$ID)
translated_regulons_df <- translated_regulons_df[,c(3,4,2)]
##PROTEO
proteomics_DE_t_sp3 <- as.data.frame(read_delim("data/proteomics_DE_t_TUvsNG_autoSP3.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
View(proteomics_DE_t_sp3)
proteomics_DE_t_sp3 <- proteomics_DE_t_sp3 %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
proteomics_DE_t_MTBE <- as.data.frame(read_delim("data/proteomics_DE_t_TUvsNG_MTBE_SP3.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
proteomics_DE_t_MTBE <- proteomics_DE_t_MTBE %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
View(proteomics_DE_t_sp3)
View(proteomics_DE_t_MTBE)
View(metabolomics_DE_t)
View(t_table)
