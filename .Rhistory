cosmos_prot_input <- proteomics_DE_t$t
names(cosmos_prot_input) <- proteomics_DE_t$ID
View(cosmos_prot_input)
View(cosmos_met_input)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
View(met_cosmos)
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
View(prot_cosmos)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
View(met_cosmos)
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
View(cosmos_met_input)
names(cosmos_met_input) <- met_cosmos$HMDB
View(cosmos_met_input)
View(prot_cosmos)
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
View(cosmos_met_input)
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
View(metab_input)
View(prot_input)
View(sig_input)
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_met_input) <- prot_cosmos$ID
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_met_input) <- prot_cosmos$ID
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
View(met_cosmos)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
View(met_cosmos)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
View(met_cosmos)
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_met_input) <- prot_cosmos$ID
View(cosmos_met_input)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
View(prot_cosmos)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
View(met_cosmos)
View(cosmos_met_input)
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
View(met_cosmos)
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
View(met_cosmos)
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
View(cosmos_met_input)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
metabolomics_DE_t <- as.data.frame(read_delim("data/metabolomics_DE_t_TUvsNG.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
proteomics_DE_t <- as.data.frame(read_delim("data/proteomics_DE_t_TUvsNG_autoSP3.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE))
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
metabolomics_DE_t <- merge(metabolomics_DE_t, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
library(dplyr)
library(tidyr)
metabolomics_DE_t <- metabolomics_DE_t %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- metabolomics_DE_t[,c(1,12)]
cosmos_met_input <- metabolomics_DE_t$t
names(cosmos_met_input) <- metabolomics_DE_t$HMDB
proteomics_DE_t <- proteomics_DE_t %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
cosmos_prot_input <- proteomics_DE_t$t
names(cosmos_prot_input) <- proteomics_DE_t$ID
cosmos_met_input <- cosmos_met_input[which(abs(cosmos_met_input) > 3)]
cosmos_prot_input <- cosmos_prot_input[which(abs(cosmos_prot_input) > 6)]
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
library(readr)
library(readxl)
library(cosmosR)
library(decoupleR)
library(dplyr)
library(tidyr)
data("meta_network")
meta_network <- meta_network[which(meta_network$source != meta_network$target),]
patient <-"1FF2F9"
# single patient input
# metab
met_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_metabolomics_z)[1]))
colnames(met_cosmos) <- c("ID", "logFC_z")
met_cosmos$ID <- logFC_metabolomics_z[,1]
met_cosmos$logFC_z<- logFC_metabolomics_z[,which(colnames(logFC_metabolomics_z) == patient)]
# filter top 50 metab
met_cosmos <- met_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:50)
# prot
prot_cosmos <- as.data.frame(matrix(NA, ncol = 2, nrow = dim(logFC_proteomics_TUvsNG)[1]))
colnames(prot_cosmos) <- c("ID", "logFC_z")
prot_cosmos$ID <- logFC_proteomics_TUvsNG[,1]
prot_cosmos$logFC_z<- logFC_proteomics_TUvsNG[,which(colnames(logFC_proteomics_TUvsNG) == patient)]
# filter top 100 prot
prot_cosmos <- prot_cosmos %>%
arrange(desc(abs(logFC_z))) %>%
slice(1:100)
Biocrates_metabolite_identifier <- read_excel("support/Biocrates_metabolite_identifier.xlsx")
Biocrates_metabolite_identifier$feature <- gsub("[()/: -]",".",Biocrates_metabolite_identifier$feature)
met_cosmos <- merge(met_cosmos, Biocrates_metabolite_identifier, by.x = "ID", by.y = "feature")
met_cosmos <- met_cosmos %>%
mutate(HMDB = strsplit(as.character(HMDB), "/")) %>%
unnest(HMDB) %>%
filter(HMDB != "")
mapping <- met_cosmos[,c(1,6)]
cosmos_met_input <- unlist(met_cosmos$logFC_z)
names(cosmos_met_input) <- met_cosmos$HMDB
cosmos_met_input <- prepare_metab_inputs(cosmos_met_input, c("c","m"))
cosmos_prot_input <- unlist(prot_cosmos$logFC_z)
names(cosmos_prot_input) <- prot_cosmos$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options(solver = "cplex")
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
# my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solverPath <- "cplex/cplex.exe"
# my_options$solverPath <- "cbc/cbc-osx/cbc" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
# my_options$solver <- "cbc"
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_met_input, meta_network)
sig_input <- cosmosR:::filter_input_nodes_not_in_pkn(cosmos_prot_input, meta_network)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 3,
CARNIVAL_options = my_options)
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_network,
signaling_data = sig_input,
metabolic_data = metab_input,
maximum_network_depth = 4,
CARNIVAL_options = my_options)
my_options$timelimit <- 600
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
View(metabolomics_DE_t)
View(metabolomics_DE_t)
View(metabolomics_DE_t)
library(readr)
library(readxl)
library(SummarizedExperiment)
library(dplyr)
library(tidyr)
library(tibble)
raw_metab <- readRDS("data/SummarizedExperiment_extraction_method_cohort_metabolomics.RDS")
raw_prot <- readRDS("data/SummarizedExperiment_extraction_method_cohort_proteomics.RDS")
raw_metab <- readRDS("data/SummarizedExperiment_extraction_method_cohort_metabolomics.RDS")
raw_prot <- readRDS("data/SummarizedExperiment_extraction_method_cohort_proteomics.RDS")
# raw_metab
metab_count <- as.data.frame(raw_metab@assays@data@listData[[1]])
raw_metab@colData@listData[["Sample.Description"]]
# raw_metab
metab_count <- as.data.frame(raw_metab@assays@data@listData[[1]])
colnames(metab_count) <- raw_metab@colData@listData[["Sample.Description"]]
metab_count <- unique(metab_count)
metabolomics_TUvsNG <- as.data.frame(metab_count)
View(metabolomics_TUvsNG)
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
raw_prot@colData@listData[["Pseudonym"]]
View(raw_prot)
raw_prot@colData@listData[["Processing"]]
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
View(prot_count)
# raw_prot
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
MTBE <- raw_prot@colData@listData[["Pseudonym"]][which(raw_prot@colData@listData[["Processing"]] == "MTBE_SP3")]
MTBE
autoSP3 <- raw_prot@colData@listData[["Pseudonym"]][which(raw_prot@colData@listData[["Processing"]] == "autoSP3")]
MTBE
autoSP3
sum(which(MTBE == autoSP3))
MTBE %in% autoSP3
sum(MTBE %in% autoSP3)
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
View(metabolomics_TUvsNG)
View(metabolomics_TUvsNG)
# For pathway enrichment analysis
PEA_metab <- metabolomics_TUvsNG[, c(3:8,15, 16)]
View(PEA_metab)
# For pathway enrichment analysis
PEA_metab <- metabolomics_TUvsNG[, c(3:8,15 , 16)]
# raw_prot
# MTBESP3 = Prot1
# autoSP3 = Prot2
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
View(prot_count)
View(metabolomics_TUvsNG)
# Prot1
PEA_prot_MTBE <- prot_count[, c(12, 11, 16, 15, 14, 13, 18, 17)]
View(PEA_prot_MTBE)
View(PEA_metab)
View(raw_prot)
raw_prot@colData@rownames
MTBE
SP3
autoSP3
# Prot1
PEA_prot_MTBE <- prot_count[, c(12, 11, 16, 15, 14, 13, 18, 17)]
# Prot 2
PEA_prot_autoSP3 <- prot_count[, c(34, 33, 30, 29, 35, 28, 32, 31)]
View(PEA_prot_autoSP3)
View(PEA_prot_MTBE)
# raw_prot
# MTBESP3 = Prot1
# autoSP3 = Prot2
prot_count <- as.data.frame(raw_prot@assays@data@listData[[1]])
colnames(prot_count) <- raw_prot@colData@listData[["Pseudonym"]]
prot_count <- tibble::rownames_to_column(prot_count, "ID")
prot_count <- prot_count %>%
mutate(ID = strsplit(as.character(ID), ";")) %>%
unnest(ID) %>%
filter(ID != "")
prot_count <- prot_count[prot_count$ID != "NA",]
prot_count <- unique(prot_count)
View(prot_count)
prot_count <- prot_count %>%
column_to_rownames("ID")
# Prot1
PEA_prot_MTBE <- prot_count[, c(12, 11, 16, 15, 14, 13, 18, 17)]
# Prot 2
PEA_prot_autoSP3 <- prot_count[, c(34, 33, 30, 29, 35, 28, 32, 31)]
source("~/GitHub/prot_met_workflow/scripts/SMARTCARE_decoupleR_sample_preparation.R", echo=TRUE)
View(PEA_prot_MTBE)
View(PEA_prot_autoSP3)
colbames(PEA_prot_autoSP3) <- gsub("[.]1", "", PEA_prot_autoSP3)
colnames(PEA_prot_autoSP3) <- gsub("[.]1", "", PEA_prot_autoSP3)
source("~/GitHub/prot_met_workflow/scripts/SMARTCARE_decoupleR_sample_preparation.R", echo=TRUE)
View(PEA_prot_autoSP3)
